from etc.etc import read_file
from numpy import array

"""
Evaluation functions and code for testing new detection methods
ALO (at_least_one_binary_classification)
MV (majority_vote_binary_classification)
"""

MALWARE = 1
GOODWARE = 0

def at_least_one_binary_classification(y_pred):
    """
    If at least one is malicious, the entire file is classified as malicious
    Only for binary classification

    Args:
        y_pred (array): array of section classifications for a file
    Pass in a list of section classifications belonging to same file

    Returns:
        (int): Classification of file
    """
    for cls in y_pred:
        if cls[MALWARE] > (cls[GOODWARE]):
            return MALWARE # Malware
    return GOODWARE # Goodware



def majority_vote_binary_classification(y_pred):
    """
    The majority of votes determines the classification
    Pass in a list of section classifications belonging to same file

    Args:
        y_pred (array): array of section classifications for a file

    Returns:
        malwareLikelihood (float): probability between 0. and 1. of
                                   predictions being Malware
    """

    binaryPredictions = (y_pred == y_pred.max(axis=1)[:, None]).astype(int).sum(axis=0)
    malwareLikelihood = (binaryPredictions[1]) / (sum(binaryPredictions))
    return malwareLikelihood


def predict(fs, dir, classifier):
    """
    Tests MV and ALO Evaluation with files in directory with classifier

    Args:
        fs (string): array of filenames to test
        dir (string): path to directory containing fs
        classifier (Keras Model): model to classify data from dir and fs

    Returns:
        tuple of ALO and MV predictions for the files
    """
    alo_predictions = []
    mv_predictions = []

    for file in fs:
        imgs = read_file(file, dir)
        cls = classifier.predict(array(imgs))
        alo = at_least_one_binary_classification(cls)
        mv = majority_vote_binary_classification(cls)

        alo_predictions.append(alo)
        mv_predictions.append(mv)

    return (alo_predictions, mv_predictions)
