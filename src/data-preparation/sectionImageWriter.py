import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
import matplotlib
import os
import array
import numpy as np
from scipy import misc
from PIL import Image
from math import ceil
import argparse
from os import listdir, system
from os.path import isfile, join, isdir

"""
This file is for converting a nested directory structure of exes into a nested
directory structure of imgs, like created in the fileSplitter file. The other
fileImageWriter file is for converting a directory of files to a directory of images

provide grey filepath if you want to write grey files, and color if you want
color files. Size is the maximum filesize, so if your maximum filesize is 10MB
but you want it to be 11MB with empty space the size argument will add this
extra space. Otherwise each file will be only as large as it needs to be to fit
in the data. Resize is for deciding how large you want the files, e.g. i'm
working with a 32 bit CNN so all of mine willl be -r 32.
"""

WIDTH = 384

parser = argparse.ArgumentParser()
parser.add_argument("-g", "--grey", default=None,
                    help="path to save grey files")
parser.add_argument("-c", "--color", default=None,
                    help="path to save color files")
parser.add_argument("-s", "--size", type=int, default=None,
                    help="maximum bytes for image file")
parser.add_argument("-f", "--files", default=None, required=True,
                    help="directory containing files to convert")
parser.add_argument("-r", "--resize", default=None, type=int,
                    help="values to resize to, e.g. -r 32")
args = parser.parse_args()

def generate_black_image(n,m):
    """
    Creates a black png image to write file to

    Args:
        n (int): width of image to create
        m (int): height of image to write
    """
    img = Image.new('RGB', (n,m), (0, 0, 0))
    img.save("null.png", "PNG")

def generate_colormap():
    """
    Creates a colormap to use when creating RGB color images of files

    Returns:
        im: colormap
        x: values
    """
    x = np.array([ np.arange(x,x+16)/256 for x in range(0,256,16) ])
    im = plt.imshow(x, cmap=plt.cm.nipy_spectral)
    #plt.show()
    return im, x

def write_bytes_to_file(filepath, dirname, filename, size, colorPath, greyPath, resize, colDct):
    """
    Write bytes to an image file

    Args:
        filepath (string): filepath to directory to read file from
        dirname (string): name of file to use as new directory name containing section images
        filename (string): filename of section file
        size (int): maximum size if specified, otherwise size of file is used
        colorPath (string): path to directory to store color images
        greyPath (string): path to directory to store grey images
        resize (int): size to resize images to, e.g. resizexresize
        colDct (color map dictionary): dictionary storing color map for RGB
    """

    path = '{}/{}/{}'.format(filepath,dirname,filename)
    f = open(path, 'rb')
    bytes = f.read()

    if not size:
        size = len(bytes)
        if size == 0:
            return
        generate_black_image(WIDTH, int(ceil(size/WIDTH)))

    elif size > len(bytes):
        size = len(bytes)

    # create new directory for files
    cmd = 'mkdir {}/{}'.format(greyPath, dirname)
    system(cmd)

    nullImageColor = None
    nullImageGrey = None
    colorPixels = None
    greyPixels = None

    if greyPath:
        nullImageGrey = Image.open("null.png")
        greyPixels = nullImageGrey.load()
    if colorPath:
        nullImageColor = Image.open("null.png")
        colorPixels = nullImageColor.load()

    byteCounter = 0

    for i in range(0, int(ceil(size/WIDTH))):
        for j in range(0,WIDTH):
            if byteCounter == size-1: break
            byte = hex(bytes[byteCounter])

            if greyPath:
                greyRGBvalue = int(byte,16)
                greyPixels[j, i] = (greyRGBvalue, greyRGBvalue, greyRGBvalue)
            if colorPath:
                x,y = 0,0
                if len(byte) == 3:
                    x,y = 0, int(byte[2], 16)
                else:
                    x, y = int(byte[2],16), int(byte[3], 16)
                # 0,0 is top left. 15,0 is top right. x is correct y is flipped.
                colorPixels[j, i] = colDct[x][y]
            byteCounter += 1

    filename = filename[:-4] + ".png" if filename[-4:] == '.exe' else filename + ".png"
    if greyPath:
        saveTo = '{}/{}/{}'.format(greyPath, dirname, filename)
        if resize:
            nullImageGrey = nullImageGrey.resize((resize,resize))
        nullImageGrey.save(saveTo)
    if colorPath:
        if resize:
            nullImageColor = nullImageColor.resize((resize, resize))
        nullImageColor.save(colorPath + filename)

if args.size:
    generate_black_image(WIDTH, int(ceil(args.size/WIDTH)))

colDct = {}
if args.color:
    cmap, vals = generate_colormap()
    # generate colordict once so it doesn't get recomputed
    colDct = {0 : {},1 : {},2 : {},3:{},4:{},5:{},6:{},7:{},8:{},9:{},10:{},11:{},12:{},13:{},14:{},15:{}}
    for i in range(0,16):
        for j in range(0,16):
            r,g,b,_ = cmap.to_rgba(vals[j, i])
            if not colDct[i].get(j):
                colDct[i][j] = (int(r*255),int(g*255),int(b*255))

# get directories for files
dir = [f for f in listdir(args.files) if isdir(join(args.files, f))]

# for each filedirectory in dir, e.g. each file1.exe dir representing sections
for d in dir:
    # get all section files
    files = [ f for f in listdir(args.files + d) if isfile(join(args.files + d, f))]
    # for each section, write bytes to image file
    for fl in files:
        write_bytes_to_file(args.files, d, fl, args.size, args.color, args.grey, args.resize, colDct)
