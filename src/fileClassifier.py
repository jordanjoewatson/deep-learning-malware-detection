from os import listdir, stat
from os.path import isfile, join
from numpy import array
from PIL import Image
from sklearn.model_selection import train_test_split
from sklearn.utils import shuffle
from sklearn.metrics import confusion_matrix, roc_curve, auc
import numpy as np
import argparse
from classifiers.CNN import create_model
from keras.utils import to_categorical
from etc.etc import accuracy

"""
File for Classification and Adversarial Variants based on previous research
ideas, i.e. not using sections for classification

File Classifier
"""

parser = argparse.ArgumentParser()

parser.add_argument("-g", "--goodware", default=None, required=True,
                    help="directory containing goodware file directories containing images")
parser.add_argument("-m", "--malware", default=None, required=True,
                    help="directory containing goodware file directories containing images")
parser.add_argument("-a", "--advars", default=None, required=True,
                    help="directory containing adversarial variants")
parser.add_argument("-i", "--infection", default="MicrosoftEdge.png",
                    help="name of file used to infect the Malware, ensures this image is included in dataset")
parser.add_argument("-s", "--savemodel", default='.tmpfile',
                    help="file to save model")
parser.add_argument("-e", "--epochs", type=int, default=4,
                    help="epochs for CNN")
parser.add_argument("-r", "--results", default=None,
                    help="file to save results")

args = parser.parse_args()

# read files
gwfiles = [f for f in listdir(args.goodware) if isfile(join(args.goodware, f)) if f != args.infection]
mwfiles = [f for f in listdir(args.malware) if isfile(join(args.malware, f))]

# get 20 percent of each for testing
gwX_train, gwX_test, gwy_train, gwy_test = train_test_split(gwfiles, [0] * len(gwfiles), test_size=0.2)
mwX_train, mwX_test, mwy_train, mwy_test = train_test_split(mwfiles, [1] * len(mwfiles), test_size=0.2)

gwX_train.append(args.infection)
mwAdv = [ array(Image.open('{}{}'.format(args.advars, mwfile))) for mwfile in mwX_test ]

gwX_train = [ array(Image.open(args.goodware + gwfile)) for gwfile in gwX_train ]
gwy_train = [0] * len(gwX_train)
gwX_test = [ array(Image.open(args.goodware + gwfile)) for gwfile in gwX_test ]
gwy_test = [0] * len(gwX_test)
mwX_train = [ array(Image.open(args.malware + mwfile)) for mwfile in mwX_train ]
mwy_train = [1] * len(mwX_train)
mwX_test = [ array(Image.open(args.malware + mwfile)) for mwfile in mwX_test ]
mwy_test = [1] * len(mwX_test)

X_train = np.array(gwX_train + mwX_train) /255
X_test = np.array(gwX_test + mwX_test) / 255
y_train = gwy_train + mwy_train
y_test = gwy_test + mwy_test
X_train, y_train = shuffle(X_train, y_train)
# Adversarial Variants
mwAdv = np.array(mwAdv)/255
y_train = to_categorical(y_train)
y_test_cat = to_categorical(y_test)

model = create_model(args.epochs, args.savemodel, X_train, y_train, X_test, y_test_cat)

x = model.predict(X_test)
x = [ 0 if c[0] > c[1] else 1 for c in x ]
advResults = model.predict(mwAdv)
mwAdvResults = [ 0 if c[0] > c[1] else 1 for c in advResults ]
advFN = mwAdvResults.count(0)
ttl = len(mwAdv)

(tn, fp, fn, tp) = (confusion_matrix(y_test, x).ravel())
print("File Classifier Accuracy: " + str(accuracy([ tp, fp, fn, tn ])))

#WRITE TO FILE
if args.results:
    results = [
        accuracy([tp, fp, fn, tn]),
        tp, fp, fn, tn,
        advFN
    ]
    f = open(args.results, "a")
    f.write("\n")
    f.write(', '.join([ str(res) for res in results ]))
    f.close()

print("False Negatives: " + str(fn/ttl))
print("Adversarial Variant False Negatives: " + str(advFN/ttl))
